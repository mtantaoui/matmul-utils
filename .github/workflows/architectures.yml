name: Run Rust Script on Multiple Architectures

on:
  push:
    branches: [main, master]
  pull_request:
    branches: [main, master]
  workflow_dispatch:

jobs:
  run-script:
    name: Run on ${{ matrix.os }}-${{ matrix.arch }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        arch: [x86_64]
        include:
          - os: ubuntu-latest
            arch: aarch64
          - os: ubuntu-latest
            arch: armv7
          - os: macos-latest
            arch: aarch64

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Rust on Windows
        if: runner.os == 'Windows'
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true

      - name: Set up Rust on Linux/macOS
        if: runner.os != 'Windows'
        run: |
          curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH
          source $HOME/.cargo/env
          rustup default stable

      - name: Install QEMU for ARM emulation
        if: matrix.arch == 'armv7' || matrix.arch == 'aarch64'
        run: |
          sudo apt update
          sudo apt install -y qemu-user-static

      - name: Install Rust target for ARMv7
        if: matrix.arch == 'armv7'
        run: rustup target add armv7-unknown-linux-gnueabihf

      - name: Install `cross` for cross-compilation
        if: matrix.arch != 'x86_64'
        run: cargo install cross

      - name: Run script (x86_64)
        if: matrix.arch == 'x86_64'
        run: cargo run --release

      - name: Run script using `cross` (ARM architectures)
        if: matrix.arch == 'armv7' || matrix.arch == 'aarch64'
        run: cross run --release --target ${{ matrix.arch }}-unknown-linux-gnueabihf

      - name: Capture and display output
        run: |
          echo "::group::Script Execution Results"
          echo "Architecture: ${{ matrix.arch }}"
          echo "Operating System: ${{ matrix.os }}"
          echo "::endgroup::"
